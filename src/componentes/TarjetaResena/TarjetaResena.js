import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import './TarjetaResena.css';

const TarjetaResena = ({ 
  pelicula, 
  onEliminar, 
  onEditar, 
  onToggleLike, 
  onAbrirComentarios,
  usuarioActual = 'usuario_actual' 
}) => {
  const {
    id,
    titulo,
    a√±o,
    imagenUrl,
    calificacion,
    usuario,
    fechaResena,
    textoResena,
    megusta,
    fechaVisionado,
    likes = 0,
    yaLeDiLike = false,
    comentarios = [],
    tags = [],
    contieneEspoilers = false
  } = pelicula;

  const [mostrarAcciones, setMostrarAcciones] = useState(false);
  const [textoCompleto, setTextoCompleto] = useState(false);

  const esPropioDue√±o = usuario === usuarioActual;

  // Funci√≥n auxiliar para truncar texto
  const truncarTexto = (texto, limite = 300) => {
    if (texto.length <= limite) return texto;
    return textoCompleto ? texto : texto.substring(0, limite) + '...';
  };

  // Funci√≥n para generar estrellas basada en la calificaci√≥n
  const generarEstrellas = (puntuacion) => {
    const estrellas = [];
    const puntuacionRedondeada = Math.round(puntuacion * 2) / 2; // Redondear a medias estrellas
    
    for (let i = 1; i <= 5; i++) {
      if (i <= puntuacionRedondeada) {
        estrellas.push(<span key={i} className="estrella completa">‚òÖ</span>);
      } else if (i - 0.5 === puntuacionRedondeada) {
        estrellas.push(<span key={i} className="estrella media">‚òÜ</span>);
      } else {
        estrellas.push(<span key={i} className="estrella vacia">‚òÜ</span>);
      }
    }
    return estrellas;
  };

  return (
    <article className="tarjeta-resena">
      <div className="contenido-resena">
        {/* Imagen de la pel√≠cula */}
        <div className="contenedor-imagen-pelicula">
          <img 
            src={imagenUrl} 
            alt={`P√≥ster de ${titulo}`}
            className="imagen-pelicula"
          />
        </div>

        {/* Informaci√≥n y rese√±a */}
        <div className="informacion-resena">
          {/* Encabezado */}
          <header className="encabezado-resena">
            <div className="info-usuario">
              <span className="nombre-usuario">Rese√±a de {usuario}</span>
              <div className="fechas-resena">
                <span className="fecha-visionado">Visto el {fechaVisionado}</span>
              </div>
            </div>
          </header>

          {/* T√≠tulo y a√±o de la pel√≠cula */}
          <div className="titulo-pelicula-contenedor">
            <Link 
              to={`/pelicula/${encodeURIComponent(titulo)}`}
              className="enlace-titulo-pelicula"
            >
              <h3 className="titulo-pelicula">{titulo}</h3>
            </Link>
            <span className="a√±o-pelicula">{a√±o}</span>
          </div>

          {/* Calificaci√≥n con estrellas */}
          <div className="calificacion-contenedor">
            <div className="estrellas-calificacion">
              {generarEstrellas(calificacion)}
            </div>
            {megusta && <span className="icono-megusta">‚ù§Ô∏è</span>}
          </div>

          {/* Texto de la rese√±a */}
          <div className="texto-resena">
            <p>{truncarTexto(textoResena)}</p>
            {textoResena.length > 300 && (
              <button 
                className="boton-ver-mas"
                onClick={() => setTextoCompleto(!textoCompleto)}
              >
                {textoCompleto ? 'Ver menos' : 'Ver m√°s'}
              </button>
            )}
          </div>

          {/* Tags de la rese√±a */}
          {tags.length > 0 && (
            <div className="tags-resena">
              {tags.map((tag, index) => (
                <span key={index} className="tag-resena">
                  {tag}
                </span>
              ))}
            </div>
          )}

          {/* Advertencia de spoilers */}
          {contieneEspoilers && (
            <div className="advertencia-spoilers">
              ‚ö†Ô∏è Esta rese√±a contiene spoilers
            </div>
          )}

          {/* Pie de la rese√±a */}
          <footer className="pie-resena">
            <span className="fecha-publicacion">Publicado el {fechaResena}</span>
            
            <div className="acciones-resena">
              {/* Bot√≥n de like */}
              <button 
                className={`boton-like ${yaLeDiLike ? 'activo' : ''}`}
                onClick={() => onToggleLike && onToggleLike(id)}
                title={yaLeDiLike ? 'Quitar me gusta' : 'Me gusta'}
              >
                <span className="icono-like">
                  {yaLeDiLike ? '‚ù§Ô∏è' : 'ü§ç'}
                </span>
                <span className="contador-likes">{likes}</span>
              </button>

              {/* Bot√≥n de comentarios */}
              <button 
                className="boton-comentar"
                onClick={() => onAbrirComentarios && onAbrirComentarios(id)}
              >
                üí¨ Comentarios
                {comentarios.length > 0 && (
                  <span className="contador-comentarios">({comentarios.length})</span>
                )}
              </button>

              {/* Men√∫ de acciones del propietario */}
              {esPropioDue√±o && (
                <div className="menu-acciones-dueno">
                  <button 
                    className="boton-menu-acciones"
                    onClick={() => setMostrarAcciones(!mostrarAcciones)}
                  >
                    ‚ãÆ
                  </button>
                  
                  {mostrarAcciones && (
                    <div className="opciones-acciones">
                      <button 
                        className="opcion-editar"
                        onClick={() => {
                          onEditar && onEditar(pelicula);
                          setMostrarAcciones(false);
                        }}
                      >
                        ‚úèÔ∏è Editar
                      </button>
                      <button 
                        className="opcion-eliminar"
                        onClick={() => {
                          if (window.confirm('¬øEst√°s seguro de que quieres eliminar esta rese√±a?')) {
                            onEliminar && onEliminar(id);
                          }
                          setMostrarAcciones(false);
                        }}
                      >
                        üóëÔ∏è Eliminar
                      </button>
                    </div>
                  )}
                </div>
              )}
            </div>
          </footer>
        </div>
      </div>

      {/* Overlay para cerrar men√∫ de acciones */}
      {mostrarAcciones && (
        <div 
          className="overlay-acciones"
          onClick={() => setMostrarAcciones(false)}
        />
      )}
    </article>
  );
};

export default TarjetaResena;
