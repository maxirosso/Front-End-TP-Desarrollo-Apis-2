# Nombre del pipeline
name: Deploy Frontend to AWS S3 and CloudFront

# Disparador: Se ejecuta cada vez que hay un push a la rama 'main'
on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
    # 1. Clona el código del repositorio
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Configura Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20' # Actualizado a Node 20 por requerimientos de dependencias
        cache: 'npm'

    # 3. Instala las dependencias y construye la versión de producción
    - name: Install dependencies and build
      run: |
        npm install
        # Imprimo AMBAS variables para depurar
        # Escribe el VALOR del SECRETO en el archivo (sobrescribe)
        echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" > .env.production
        
        # Añade el VALOR del otro SECRETO al archivo (añade)
        echo "REACT_APP_USER_URL=${{ secrets.REACT_APP_USER_URL }}" >> .env.production
        
        echo "--- Contenido de .env.production ---"
        cat .env.production # Mostramos el contenido del archivo creado
        echo "-----------------------------"
        
        # Ejecuta el build, ignorando warnings como errores
        CI=false npm run build

    # 4. Configura las credenciales de AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 5. Sube los archivos de la carpeta 'build' a S3
    - name: Deploy to S3
      run: aws s3 sync ./build s3://${{ secrets.S3_BUCKET_NAME }} --delete

    # 6. Invalida la caché de CloudFront
    - name: Invalidate CloudFront cache
      run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
